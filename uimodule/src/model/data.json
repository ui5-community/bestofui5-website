{"types":[{"name":"app"},{"name":"middleware"},{"name":"task"},{"name":"tooling"},{"name":"cc"}],"packages":[{"name":"ui5-app-module","version":"0.1.1","description":"UI5 module","private":true,"author":"Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-app-module"},"dependencies":{"chart.js":"^3.7.1"},"type":"app","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-app-module"},{"name":"ui5-middleware-cfdestination","version":"0.8.3","description":"UI5 middleware for CF destinations","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-cfdestination"},"scripts":{"test":"ava"},"ava":{"files":["test/**/*","!test/_ui5-app"],"verbose":true,"timeout":"20s"},"dependencies":{"@sap/approuter":"^10.12.0","@ui5/logger":"^2.0.1","request":"^2.88.2"},"devDependencies":{"ava":"^4.0.1","get-port":"^6.1.1","nock":"^13.2.4","prettier":"^2.5.1","replace-in-file":"^6.3.2","supertest":"^6.2.2"},"ui5":{"dependencies":[]},"type":"middleware","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-cfdestination","readme":"# UI5 middleware for CF destinations\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), making `destinations` configured in SAP CF available for local development.\n\n## Install\n\n```bash\nnpm install ui5-middleware-cfdestination --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- `debug`: `<boolean>`, default: `false`  \nverbose logging\n\n- `port`: `<int>`, default: `5000`  \nport to run the underlying `approuter` on\n\n- `xsappJson`: `<string path>`, default: `\"./xs-app.json\"`  \npath to the cf-style approuter configuration file `xs-app.json`\n\n- `destinations`: `<Array of name/value pairs>`, default: `[]`\n  - `name: <string>` destination name, matching the one used in routes in `xs-app.json`  \n  - `url: <string>` URI to the host to \"proxy\" to\n\n- `allowServices`: `<boolean>`, default: `false`  \nallow [BTP services](https://discovery-center.cloud.sap/serviceCatalog?) to be used at runtime that are configured in `xs-app.json`  \n(requires an authenticated BTP session!)\n\n- `authenticationMethod`: `\"none\"` || `\"route\"`, default: `\"none\"`  \nwhether to equip routes with authentication\n\n- `allowLocalDir`: `<boolean>`, default: `false`  \nallow static assets to be picked up by the included `approuter`  \ndefaults to `false` as usually all local files/assets are supposedly served by `ui5-server`\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-cfdestination\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-cfdestination\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n    - name: ui5-middleware-cfdestination\n      afterMiddleware: compression\n      configuration:\n        authenticationMethod: \"none\" # \"none\" || \"route\", default: \"none\"\n        allowServices: true # allows BTP services like SAP IoT to be used \n        debug: true\n        port: 1091\n        xsappJson: \"xs-app.json\"\n        destinations:\n          # check that the destination name (here: \"backend\") matches your router in xs-app.json\n          - name: \"backend\"\n            url: \"https://services.odata.org/V4/(S(fdng4tbvlxgzpdtpfap2rqss))/TripPinServiceRW/\"\n```\n\n3. put the cf routing config file `xs-app.json` in the location of `$yourapp` you specified above (`xsappJson`) -  \nrecommendation is to put it at the root `/` of your UI5 app!\n\n## How it works\n\nThe middleware wraps the `@sap/approuter` npm module that is used in the SAP BTP CloudFoundry environment for serving UI5 applications, including proxying the configured destinations.\n\nDuring development, the `approuter` is started on a configurable port, running alongside the regular local `ui5-server`. When a call to a URL destination is detected at `$webserver/destination`, it is proxied to `$approuter:$port` via [`request`](https://www.npmjs.com/package/request).\n\n## Misc/FAQ\n\n**q**: does authentication on destinations  \n**a**: yes, works ðŸ¥³\n\n- prerequisite: a `default-env.json` file at the root `/` of your UI5 app\nBespoken `default-env.json` file can be obtained [via the `Default Env CLI Plugin`](https://github.com/saphanaacademy/DefaultEnv)\n- `ui5.yaml > server > customMiddlware > ui5-middleware-cfdestination`: set `authenticationMethod` to `route` (see config example above)\n- `xs-app.json` (also at the root `/` of your UI5 app):\n  - set `authenticationMethod` to `route`\n  - in the route with the desired protected authentication, set `authenticationType` to `xsuaa`  \n\nsee `./test/auth/**/*` for example files for the above!\n\n**q**: what's `allowLocalDir` for?  \n**a**: allows to protect local static assets (e.g. `html` files) -in addition to destinations- with approuter as well.  \nsee `test/auth/xs-app-with-localDir.json` for an example!\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n"},{"name":"ui5-middleware-iasync","version":"0.1.0-alpha.6","description":"UI5 Tooling middleware to sync browser interactions","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-iasync"},"dependencies":{"@ui5/logger":"^2.0.1","browser-sync":"^2.27.7","connect-injector":"^0.4.4"},"ui5":{"dependencies":[]},"type":"middleware","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-iasync","readme":"# UI5 middleware for syncing interactions across browsers\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), syncing interactions between different browsers, hopefully somewhat easing manual testing :)  \n\n## Install\n\n```bash\nnpm install ui5-middleware-iasync --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- `https: <boolean>` default: false  \nwhether to use the middleware via SSL/wss\n- `httpModule: <string>`, default: undefined  \ncapability to e.g. use `http2`\n- `port: <integer>`, default: 3000  \nport to run middleware at\n- `debug: <boolean>`, default: false  \ndisplay extensive logging\n- `logConnections: <boolean>`, default: true  \nshow connected browsers\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-iasync\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-iasync\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-iasync\n    beforeMiddleware: serveResources\n    configuration:\n      https: false\n      debug: false\n      logConnections: true\n      port: 4711\n```\n\n## How it works\n\n`iasync` uses [browsersync.io](https://www.browsersync.io) under the hood. It transmits user interactions of the UI via a websocket pool. Respectively, all browsers connected to `http://ui5-app:port` open a websocket connection, listening for and receiving interactions events.  \n\nAdditionally, `iasync` injects custom HTML into `index.html`, manipulating browser event handlers of UI5 controls - see `lib/ui5mangler.html`. E.g. the `sap.m.Button`'s click event is overwritten with its' tap event.\n\n## Misc/FAQ\n\n> Watch Out!  \n> Due to manipulation of the UI5 controls (see above), interactions of the UI might lead to unexpected results!\n\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n"},{"name":"ui5-task-transpile","version":"0.3.6","description":"UI5 task for transpiling ES6+ sources","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-transpile"},"dependencies":{"@babel/core":"^7.17.5","@babel/plugin-transform-modules-commonjs":"^7.16.8","@babel/preset-env":"^7.16.11","@ui5/logger":"^2.0.1","babel-plugin-transform-async-to-promises":"^0.8.18","babel-plugin-transform-remove-console":"^6.9.4"},"ui5":{"dependencies":[]},"type":"task","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-transpile","readme":"# UI5 task for transpiling ES6+ sources\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), enabling transpiling.\n\n## Install\n\n```bash\nnpm install ui5-task-transpile --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: `true|false`  \n  verbose logging\n\n- removeConsoleStatements: `true|false`  \n  remove console statements while transpiling using [Babel plugin](https://babeljs.io/docs/en/babel-plugin-transform-remove-console)\n\n- excludePatterns: `String<Array>`  \n  array of paths inside `$yourapp/webapp/` to exclude from live transpilation,  \n  e.g. 3-rd party libs in `lib/*`\n\n- transpileAsync: `true|false`  \n  transpiling `async/await` using [this Babel plugin](https://www.npmjs.com/package/babel-plugin-transform-async-to-promises), which doesn't require  \n  the regenerator runtime ([Issue #242](https://github.com/petermuessig/ui5-ecosystem-showcase/issues/242))\n\n- babelConfig: `Object`\n  object to use as configuration for babel instead of the  \n  default configuration defined in this middleware\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-transpile\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-transpile\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-task-transpile\n    afterTask: replaceVersion\n    configuration:\n      debug: true\n      removeConsoleStatements: true\n      transpileAsync: true\n      excludePatterns:\n      - \"lib/\"\n      - \"another/dir/in/webapp\"\n      - \"yet/another/dir\"\n```\n\n## How it works\n\nThe task can be used to transpile ES6+ JavaScript code to ES5 by using `babel`.\n\n## Extending the default configuration (in `$yourapp/babel.config.json`)\n\nIf you want to further customize the transpiling options you can do so by creating a babel config file `babel.config.json` in your project directory. Babel will automatically pick up the configuration and apply it. The default configuration from this task will still be applied.\n\n### Example\n\nAn example configuration is as follows:\n\n```json\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-for-of\", { \"assumeArray\": true }],\n    [\"@babel/plugin-transform-computed-properties\", { \"loose\": true }],\n    [\"@babel/plugin-transform-destructuring\", { \"loose\": true }]\n  ]\n}\n```\n\n### Additional dependencies\n\nIf you need dependencies not included in this task you have to install them in your project in order to be able to use them.\n\n## Override babel configuration (in `$yourapp/ui5.yaml`)\n\nYou can override the default babel configuration from this package by including an object `babelConfig` in this task's configuration. If such an object is given the default configuration from this task will not be considered, but only the configuration given in `ui5.yaml` will be used.\n\n### Example\n\n```yaml\nbuilder:\n  customTasks:\n    - name: ui5-task-transpile\n      afterTask: replaceVersion\n      configuration:\n        excludePatterns:\n          - \"lib/\"\n        babelConfig: &babelConfig\n          plugins:\n            - - \"@babel/plugin-transform-computed-properties\"\n              - loose: true\n            - - \"@babel/plugin-transform-for-of\"\n              - assumeArray: true\n          presets:\n            - - \"@babel/preset-env\"\n              - targets:\n                  browsers: \"last 2 versions, ie 10-11\"\n```\n\n> Hint: if you also use use `ui5-middleware-livetranspile` you probably do not want to duplicate the babel configuration in your `ui5.yaml`. Use YAML anchors in order to reference the babel configuration across the `ui5.yaml` file.\n> In the example above the anchor `&babelConfig` defines the babel configuration of `ui5-task-transpile` and may be re-used in other parts of `ui5.yaml` by using the alias `*babelConfig`:\n>\n> ```yaml\n> server:\n>   customMiddleware:\n>   - name: ui5-middleware-livetranspile\n>     afterMiddleware: compression\n>     configuration:\n>       babelConfig:\n>         <<: *babelConfig\n>         sourceMaps: \"inline\"\n> ```\n\n### Additional dependencies\n\nIf you need dependencies not included in this task you have to install them in your project in order to be able to use them.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n"},{"name":"ui5-task-zipper","version":"0.4.9","description":"Task for the UI5 tooling to zip the webapp.","author":"Marius Obert","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-zipper"},"scripts":{"test":"ava"},"ava":{"files":["test/**/*","!test/_ui5-app","!__assets__"],"verbose":true,"timeout":"20s"},"dependencies":{"@ui5/fs":"^2.0.6","@ui5/logger":"^2.0.1","yazl":"^2.5.1"},"devDependencies":{"ava":"^4.0.1","yauzl":"^2.10.0"},"ui5":{"dependencies":[]},"type":"task","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-zipper"},{"name":"ui5-tooling-modules","version":"0.2.5","description":"UI5 tooling extensions to load and convert node modules as UI5 AMD-like modules","author":"Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-tooling-modules"},"dependencies":{"@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.1.3","@ui5/fs":"^2.0.6","@ui5/logger":"^2.0.1","espree":"^9.3.1","estraverse":"^5.3.0","fast-xml-parser":"^4.0.3","rollup":"^2.68.0","rollup-plugin-inject-process-env":"^1.3.1","rollup-plugin-polyfill-node":"^0.8.0"},"ui5":{"dependencies":[]},"type":"tooling","forks":61,"stars":143,"updatedAt":"2022-04-01T06:11:54Z","createdAt":"2019-08-15T18:55:24Z","link":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-tooling-modules","readme":"# UI5 Tooling Extensions for NPM Package Consumption\n\n> **DISCLAIMER**: This is a community project and there is no official support for this package! Also the functionality may stop working at any time in future with newer versions of the UI5 tooling!\n\nThe UI5 tooling extensions include a custom middleware and a custom task which allow to use NPM package names for AMD-like dependencies, e.g.:\n\n```bash\n# Install a dev dependency to Chart.js (https://www.chartjs.org/)\nnpm install chart.js --save-dev\n```\n\n```js\n// use Chart.js as a AMD-like dependency\nsap.ui.define([\n  \"chart.js\"\n], function(chartjs) {\n  [...]\n  alert(chartjs.version);\n  [...]\n})\n```\n\nOnce the UI5 application is finally built, the Chart.js dependency will be copied into the `dist/resources` folder with the proper namespace. In case of Chart.js above, there is no namespace and thus the location will be `dist/resources/chart.js.js`.\n\n## Install\n\n```bash\nnpm install ui5-tooling-modules --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- verbose: `boolean`  \n  Enables verbose logging (default to `false`)\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-tooling-modules\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-tooling-modules\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. Configure it in `$yourapp/ui5.yaml`:\n\nThe configuration for the custom task:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-tooling-modules-task\n    afterTask: replaceVersion\n```\n\nThe configuration for the custom middleware:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-tooling-modules-middleware\n    afterMiddleware: compression\n```\n> Hint: In case your application is using a proxy such `fiori-tools-proxy`, the proxy must run after `ui5-tooling-modules-middleware` middleware. Otherwise proxy will try to serve the resources for your installed npm package instead of `ui5-tooling-modules-middleware`. You can achieve this by setting `afterMiddleware: ui5-tooling-modules-middleware` in `fiori-tools-proxy` middleware.\n## How it works\n\nThe custom middleware is listening to incoming requests and checks those requests to match npm packages. E.g. a dependency to `chart.js` will cause a request to `resource/chart.js.js`. The middleware now derives the module name which is `\"chart.js\"` and uses `require.resolve(\"chart.js\")` to lookup the npm package for it. If an npm package exists, the middleware is using `rollup` to create a custom AMD bundle for the npm package which uses `sap.ui.define` instead of `define`.\n\nThe custom task is scanning all AMD dependencies of all modules and tries to resolve the module names. If a module has been found a custom bundle will be created in the proper namespace of the module, e.g. `@apollo/client/core` will create a custom bundle at `dist/resources/@apollo/client/core.js`.\n\n## How to obtain support\n\nPlease use the GitHub bug tracking system to post questions, bug reports or to create pull requests.\n\n## Contributing\n\nAny type of contribution (code contributions, pull requests, issues) to this showcase will be equally appreciated.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n"},{"name":"ui5-cc-md","version":"0.0.4","description":"UI5 custom (notepad) control rendering markdown into html on-the-fly","main":"Markdown.js","scripts":{"test":"jest","test:manual":"cd test/ui5-app && ui5 serve","release":"standard-version"},"keywords":["ui5","custom control","notepad control"],"author":"Volker Buzek <volker.buzek@js-soft.com>","contributors":["Peter Muessig","Matthias OÃŸwald","Marco Beier"],"repository":{"type":"git","url":"https://github.com/ui5-community/ui5-cc-md.git"},"license":"other","dependencies":{"marked":"^2.0.0"},"devDependencies":{"eslint":"^7.19.0","eslint-plugin-jest":"^24.1.3","jest":"^26.6.3","jest-puppeteer":"^4.4.0","npm-run-all":"^4.1.5","puppeteer":"^7.0.4","standard-version":"^9.1.0"},"forks":3,"stars":6,"updatedAt":"2022-03-21T07:56:09Z","createdAt":"2021-02-09T19:23:21Z","link":"https://github.com/ui5-community/ui5-cc-md","type":"cc","readme":"# UI5 custom control `ui5-cc-md`\n\nThis namespace contains a custom control rendering regular + github-flavored Markdown content, either provided as a string or from a file.  \nIt outputs plain HTML, ready to be included in an XML view.\n\n## Install\n\n```bash\n$> yarn add ui5-cc-md\n# or\n$> npm install ui5-cc-md\n```\n\n## Included controls\n\n- `Markdown`: transforms Markdown to HTML\n  - properties: (note: either `content` or `fromFile` can be used, not both)\n    - `content: <String>`: Markdown as raw string\n    - `fromFile: <Path>`: relative path to a file containing Markdwon\n  - aggregations: -\n\n## Usage\n\n1. define the dependeny in `$yourapp/package.json`\n\n   ```json\n   // it is already in \"dependencies\" after installation\n   \"ui5\": {\n     \"dependencies\": [\n       // ...\n       \"ui5-cc-md\",\n       // ...\n     ]\n   }\n   ```\n\n2. declare the namespace in your XML view and use the custom control from that namespace\n\n   ```xml\n   <mvc:View ... \n           xmlns:md=\"cc.md\"\n           ...>\n      <md:Markdown content=\"***markdown is nice!***&#13;&#10;&#13;&#10;if only there wasn't the CR problem in XML view string\" />\n      <md:Markdown fromFile=\"./fragment.md\" />\n      <md:Markdown content=\"{/markdownContent}\" />\n   </mvc:View>\n   ```\n\n## How it works\n\n`Markdown` uses the [npm module `marked`](https://marked.js.org) for transforming content from Markdown to HTML.\n\n## Build time (in apps)\n\nUse `ui5 build --all` to produce a deployable version of your app including `ui5-cc-md` and itsâ€™ control(s).\n\nOther than that, nothing specific to note for using `ui5-cc-md` in builds in UI5 apps.\n\n## Tests\n\nThe `test` folder contains a minimal UI5 app requiring `ui5-cc-md`. \n\nFor testing manually, do:\n\n```bash\n$> yarn test:manual # runs ui5 serve\n# now point a browser to http://localhost:8080\n```\n\nThe [livereload middleware](https://github.com/petermuessig/ui5-ecosystem-showcase/tree/master/packages/ui5-middleware-livereload) is included, so changes to the test app get reloaded immediately.\n\nA full automated test suite is setup with [Jest + puppeteer](https://jestjs.io/docs/en/puppeteer), starting `ui5 serve` and running all `/test/**/*.test.js` :\n\n```bash\n$> cd test/ui5-app\n$> yarn # for installing runtime dependencies\n$> cd ..\n$> yarn test\n# sample output:\n PASS  test/ui5-app/basic.test.js\n  Markdown\n    âœ“ should render markdown via content property (2374 ms)\n    âœ“ should render markdown via fromFile property (854 ms)\n    âœ“ should render markdown via binding (672 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        4.512 s, estimated 5 s\nRan all test suites.\nâœ¨  Done in 11.90s.\n```\n\n## License\n\nThis work is [dual-licensed](./LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0, but ultimately you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu),  [@matz3](https://twitter.com/matthiaso), [@wridgeu](https://twitter.com/wridgeu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them."}]}