{"types":[],"packages":[{"name":"ui5-middleware-cfdestination","version":"0.8.4","description":"UI5 middleware for CF destinations","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-cfdestination"},"scripts":{"test":"ava"},"ava":{"files":["test/**/*","!test/_ui5-app"],"verbose":true,"timeout":"20s"},"dependencies":{"@sap/approuter":"^10.12.0","@ui5/logger":"^2.0.1","request":"^2.88.2"},"devDependencies":{"ava":"^4.0.1","get-port":"^6.1.1","nock":"^13.2.4","prettier":"^2.5.1","replace-in-file":"^6.3.2","supertest":"^6.2.2"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["btp"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-cfdestination/","readme":"# UI5 middleware for CF destinations\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), making `destinations` configured in SAP CF available for local development.\n\n## Install\n\n```bash\nnpm install ui5-middleware-cfdestination --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- `debug`: `<boolean>`, default: `false`  \nverbose logging\n\n- `port`: `<int>`, default: `5000`  \nport to run the underlying `approuter` on\n\n- `xsappJson`: `<string path>`, default: `\"./xs-app.json\"`  \npath to the cf-style approuter configuration file `xs-app.json`\n\n- `destinations`: `<Array of name/value pairs>`, default: `[]`\n  - `name: <string>` destination name, matching the one used in routes in `xs-app.json`  \n  - `url: <string>` URI to the host to \"proxy\" to\n\n- `allowServices`: `<boolean>`, default: `false`  \nallow [BTP services](https://discovery-center.cloud.sap/serviceCatalog?) to be used at runtime that are configured in `xs-app.json`  \n(requires an authenticated BTP session!)\n\n- `authenticationMethod`: `\"none\"` || `\"route\"`, default: `\"none\"`  \nwhether to equip routes with authentication\n\n- `allowLocalDir`: `<boolean>`, default: `false`  \nallow static assets to be picked up by the included `approuter`  \ndefaults to `false` as usually all local files/assets are supposedly served by `ui5-server`\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-cfdestination\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-cfdestination\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n    - name: ui5-middleware-cfdestination\n      afterMiddleware: compression\n      configuration:\n        authenticationMethod: \"none\" # \"none\" || \"route\", default: \"none\"\n        allowServices: true # allows BTP services like SAP IoT to be used \n        debug: true\n        port: 1091\n        xsappJson: \"xs-app.json\"\n        destinations:\n          # check that the destination name (here: \"backend\") matches your router in xs-app.json\n          - name: \"backend\"\n            url: \"https://services.odata.org/V4/(S(fdng4tbvlxgzpdtpfap2rqss))/TripPinServiceRW/\"\n```\n\n3. put the cf routing config file `xs-app.json` in the location of `$yourapp` you specified above (`xsappJson`) -  \nrecommendation is to put it at the root `/` of your UI5 app!\n\n## How it works\n\nThe middleware wraps the `@sap/approuter` npm module that is used in the SAP BTP CloudFoundry environment for serving UI5 applications, including proxying the configured destinations.\n\nDuring development, the `approuter` is started on a configurable port, running alongside the regular local `ui5-server`. When a call to a URL destination is detected at `$webserver/destination`, it is proxied to `$approuter:$port` via [`request`](https://www.npmjs.com/package/request).\n\n## Misc/FAQ\n\n**q**: does authentication on destinations  \n**a**: yes, works 🥳\n\n- prerequisite: a `default-env.json` file at the root `/` of your UI5 app\nBespoken `default-env.json` file can be obtained [via the `Default Env CLI Plugin`](https://github.com/saphanaacademy/DefaultEnv)\n- `ui5.yaml > server > customMiddlware > ui5-middleware-cfdestination`: set `authenticationMethod` to `route` (see config example above)\n- `xs-app.json` (also at the root `/` of your UI5 app):\n  - set `authenticationMethod` to `route`\n  - in the route with the desired protected authentication, set `authenticationType` to `xsuaa`  \n\nsee `./test/auth/**/*` for example files for the above!\n\n**q**: what's `allowLocalDir` for?  \n**a**: allows to protect local static assets (e.g. `html` files) -in addition to destinations- with approuter as well.  \nsee `test/auth/xs-app-with-localDir.json` for an example!\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":2363,"downloadsLastMonth":2299,"downloads365":22522,"downloadsMonthlyGrowth":2.78,"createdAt":"2019-09-09T22:01:27.787Z","updatedAt":"2022-04-11T11:40:04.641Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-cfdestination"},{"name":"ui5-middleware-iasync","version":"0.1.0-alpha.7","description":"UI5 Tooling middleware to sync browser interactions","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-iasync"},"dependencies":{"@ui5/logger":"^2.0.1","browser-sync":"^2.27.7","connect-injector":"^0.4.4"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["browser"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-iasync/","readme":"# UI5 middleware for syncing interactions across browsers\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), syncing interactions between different browsers, hopefully somewhat easing manual testing :)  \n\n## Install\n\n```bash\nnpm install ui5-middleware-iasync --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- `https: <boolean>` default: false  \nwhether to use the middleware via SSL/wss\n- `httpModule: <string>`, default: undefined  \ncapability to e.g. use `http2`\n- `port: <integer>`, default: 3000  \nport to run middleware at\n- `debug: <boolean>`, default: false  \ndisplay extensive logging\n- `logConnections: <boolean>`, default: true  \nshow connected browsers\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-iasync\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-iasync\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-iasync\n    beforeMiddleware: serveResources\n    configuration:\n      https: false\n      debug: false\n      logConnections: true\n      port: 4711\n```\n\n## How it works\n\n`iasync` uses [browsersync.io](https://www.browsersync.io) under the hood. It transmits user interactions of the UI via a websocket pool. Respectively, all browsers connected to `http://ui5-app:port` open a websocket connection, listening for and receiving interactions events.  \n\nAdditionally, `iasync` injects custom HTML into `index.html`, manipulating browser event handlers of UI5 controls - see `lib/ui5mangler.html`. E.g. the `sap.m.Button`'s click event is overwritten with its' tap event.\n\n## Misc/FAQ\n\n> Watch Out!  \n> Due to manipulation of the UI5 controls (see above), interactions of the UI might lead to unexpected results!\n\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":49,"downloadsLastMonth":27,"downloads365":488,"downloadsMonthlyGrowth":81.48,"createdAt":"2019-12-17T16:00:18.198Z","updatedAt":"2022-04-11T11:40:04.605Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-iasync"},{"name":"ui5-middleware-index","version":"0.2.8","description":"UI5 middleware for delivering a dedicated welcome/start page","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-index"},"dependencies":{"@ui5/logger":"^2.0.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["browser"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-index/","readme":"# UI5 middleware for delivering a welcome/start/'index' page to the client\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), delivering the `$index.html` of choice (instead of the directory listing).\n\n## Install\n\n```bash\nnpm install ui5-middleware-index --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- index: `<string>`, default: `index.html`  \n  file inside `$yourapp` to deliver for `http://<host>:<port>/`\n- debug: `<boolean>`, default: `false`\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-index\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-index\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-index\n    afterMiddleware: compression\n    configuration:\n      index: \"index_peter.html\"\n```\n\n## How it works\n\nThe middleware delivers the configured `index` HTML-file to the client if the FQDN + trailing slash `/` is requested in the browser.\n\n## Development\n\nIf you want to contribute to `ui5-middleware-index`, please use [`Prettier`](https://prettier.io) for code formatting/style and apply the rules from `./.prettierrc`. Thanks 🙏!\n\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu), [@stefanbeck3](https://twitter.com/stefanbeck3), [github.com/margopolo](https://github.com/margopolo) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":360,"downloadsLastMonth":700,"downloads365":5374,"downloadsMonthlyGrowth":-48.57,"createdAt":"2020-04-04T12:08:33.379Z","updatedAt":"2022-04-11T11:40:05.208Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-index"},{"name":"ui5-middleware-livecompileless","version":"0.2.4","description":"UI5 middleware for live compiling less files","author":"Sebastian Mahr, Marcel Schork","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-livecompileless"},"dependencies":{"@ui5/logger":"^2.0.1","less-openui5":"^0.11.2"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["css"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-livecompileless/","readme":"# UI5 middleware for live compiling less files\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), live compiling less files.\n\n## Install\n\n```bash\nnpm install ui5-middleware-livecompileless --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: `true|false`  \n  verbose logging\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-livecompileless\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-livecompileless\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customMiddleware:\n    - name: ui5-middleware-livecompileless\n      beforeMiddleware: serveResources\n      configuration:\n        debug: true\n```\n\n## How it works\n\nThe css file corresponding to your less file needs to be maintained in the manifest as described [here](https://sapui5.hana.ondemand.com/#/topic/723f4b2334e344c08269159797f6f796).\nThe middleware will watch for those css files and searches for the corresponding less file, compiles it and serves it back.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@sebbi](https://app.slack.com/client/T0A7MQSJ1/D01TDU3RMSQ/user_profile/UBV5L8N8M) a beer or buy [@marcel_schork](https://twitter.com/marcel_schork) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":118,"downloadsLastMonth":139,"downloads365":1031,"downloadsMonthlyGrowth":-15.11,"createdAt":"2021-05-15T09:03:09.624Z","updatedAt":"2022-04-11T11:40:05.316Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-livecompileless"},{"name":"ui5-middleware-livereload","version":"0.5.10","description":"UI5 middleware for live reloading `webapp` sources on change","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-livereload"},"dependencies":{"@ui5/logger":"^2.0.1","connect-livereload":"^0.6.1","livereload":"^0.9.3","portfinder":"^1.0.28","yargs":"^17.3.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["livereload"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-livereload/","readme":"# UI5 middleware for live reloading `webapp` sources on change\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), doing a live reload when files inside `$yourapp` change, e.g. on save.\n\n## Install\n\n```bash\nnpm install ui5-middleware-livereload --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: true|false  \n  verbose logging\n- extraExts: `string`, default: \"xml,json,properties\"  \n  file extensions other than `js`, `html` and `css` to monitor for changes\n- port: `integer`, default: an open port choosen from _35729_  \n  port the live reload server is started on\n- watchPath|path: `string`, default: `webapp`  \n  path inside `$yourapp` the reload server monitors for changes\n- exclusions: one or many `regex`. By default, this includes `.git/`, `.svn/`, and `.hg/`\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-livereload\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-livereload\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      extraExts: \"xml,json,properties\"\n      port: 35729\n      watchPath: \"webapp\"\n```\n\nor with `path` instead of `watchPath`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      extraExts: \"xml,json,properties\"\n      port: 35729\n      path: \"webapp\"\n```\n\nReload from multiple paths:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      extraExts: \"xml,json,properties\"\n      port: 35729\n      path: \n            - \"webapp\"\n            - \"../my.reuse.library/src/my/reuse/library\"\n```\n\nExclude single subpath from `path`s/ `watchPath`s:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      extraExts: \"xml,json,properties\"\n      port: 35729\n      watchPath: \"webapp\"\n      exclusions:\n            - \"wdi5/\"\n```\n\nExclude multiple subpaths from  `path`s/ `watchPath`s:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livereload\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      extraExts: \"xml,json,properties\"\n      port: 35729\n      watchPath: \"webapp\"\n      exclusions:\n          - \"wdi5/\"\n          - \"integration/\"\n```\n\n## How it works\n\nThe middleware launches a `livereload`-server on the specified `port`, listening to changes in the specified `path` or `watchPath` inside your application directory.\n\nWhen changes are detected, a reload is triggered to **all connected clients** - so all browsers having `$yourapp` will reload the application. The reload is `#`-aware, meaning the current displayed route in your single-page UI5 app is kept steady.\n\n## HTTP/2 support\n\nThe middleware supports HTTP/2 automatically, when the UI5 server is started with the --h2 option. It uses the same SSL key and certificate, either set using the --key and --cert options, or using the default ~/.ui5/server/server.key and ~/.ui5/server/server.crt.\n\n## Misc/FAQ\n\nyep, cross-browser, cross-platform.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":13930,"downloadsLastMonth":14036,"downloads365":121048,"downloadsMonthlyGrowth":-0.76,"createdAt":"2019-09-09T22:01:27.865Z","updatedAt":"2022-04-11T11:40:05.718Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-livereload"},{"name":"ui5-middleware-livetranspile","version":"0.3.8","description":"UI5 middleware for live transpiling ES6+ sources","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-livetranspile"},"dependencies":{"@babel/core":"^7.17.5","@babel/preset-env":"^7.16.11","@ui5/logger":"^2.0.1","babel-plugin-transform-async-to-promises":"^0.8.18","lodash.merge":"^4.6.2"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["transpile"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-livetranspile/","readme":"# UI5 middleware for live transpiling ES6+ sources\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), doing on-the-fly transpilation of ES6+ sources to ES5 (incl IE11 compatability :) )\n\n## Install\n\n```bash\nnpm install ui5-middleware-livetranspile --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: true|false  \nverbose logging\n\n- excludePatterns: `String<Array>`  \narray of paths inside `$yourapp/webapp/` to exclude from live transpilation,  \ne.g. 3-rd party libs in `lib/*`\n\n- transpileAsync: `true|false`  \ntranspiling `async/await`  using [this Babel plugin](https://www.npmjs.com/package/babel-plugin-transform-async-to-promises), which doesn't require  \nthe regenerator runtime ([Issue #242](https://github.com/petermuessig/ui5-ecosystem-showcase/issues/242))\n\n- babelConfig: `Object`  \nobject to use as configuration for babel instead of the default configuration  \ndefined in this middleware\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-livetranspile\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-livetranspile\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-livetranspile\n    afterMiddleware: compression\n    configuration:\n      debug: true\n      transpileAsync: true\n      excludePatterns:\n      - \"lib/\"\n      - \"another/dir/in/webapp\"\n      - \"yet/another/dir\"\n```\n\n## How it works\n\nThe middleware intercepts every `.js`-file before it is sent to the client. The file is then transpiled on-the-fly via `babel`, including dynamic creation of a `sourcemap`.\n\nThe transpiled code and the `sourcemap` are subsequently delivered to the client instead of the original `.js`-file. Because of the `sourcemap`, setting breakpoints in the **original (ES6+) source** will cause the debugger to stop **when the corresponding transpiled source code is reached**.\n\n> `async/await` is transpiled at runtime, but the required `asyncGenerator` sources are not yet delivered on the fly. They need to be `sap.ui.require`d or `<script src=\"...\">`d separately. Alternatively you can use the babel plugin `babel-plugin-transform-async-to-promises` as described [here](../ui5-task-transpile/README.md).\n\n## Extending the default configuration (in `$yourapp/babel.config.json`)\n\nIf you want to further customize the transpiling options you can do so by creating a babel config file `babel.config.json` in your project directory. The behavior is identical to that of `ui5-task-transpile`. For more details and examples consult the [documentation of `ui5-task-transpile`](../ui5-task-transpile/README.md).\n\n## Override babel configuration (in `$yourapp/ui5.yaml`)\n\nYou can override the default babel configuration from this package by including an object `babelConfig` in this task's configuration. The behavior is identical to that of `ui5-task-transpile`. For more details and examples consult the [documentation of `ui5-task-transpile`](../ui5-task-transpile/README.md).\n\n## Misc/FAQ\n\n`.js`-files requested by the server that are missing in the application (such as `Component-preload.js`) are logged as a `WARN` message, but will not cause the middleware to break/stop.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":534,"downloadsLastMonth":904,"downloads365":8229,"downloadsMonthlyGrowth":-40.93,"createdAt":"2019-09-09T22:01:27.810Z","updatedAt":"2022-04-11T11:40:05.862Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-livetranspile"},{"name":"ui5-middleware-onelogin","version":"1.2.2","description":"A universal login provider for UI5 tooling","author":"Jakob Kjaer","main":"lib/index.js","license":"other","scripts":{"test":"npx playwright test"},"keywords":["UI5-tooling","SAPUI5","OPENUI5","Fiori"],"repository":{"url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-onelogin"},"dependencies":{"@ui5/logger":"^2.0.1","async-prompt":"1.0.1","cookie":"^0.4.2","dotenv":"^16.0.0","playwright-chromium":"^1.19.1","playwright-core":"^1.19.1","sleep-promise":"^9.1.0"},"devDependencies":{"@playwright/test":"^1.19.1","@types/cookie":"^0.4.1","@types/express":"^4.17.13","@types/prompt":"^1.1.2","eslint":"^8.9.0","eslint-config-prettier":"^8.4.0","eslint-plugin-prettier":"^4.0.0","prettier":"2.5.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["auth"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-onelogin/","readme":"# UI5 onelogin middleware\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), enabling a generic login support.\n\nThe middleware will on first request try to login with the provided credentials and save the cookie for further requests. This uses playwright in a headless mode to run the login process.\nThe first request will take longer.\n\nThis has been tested with Azure AD, Google, OpenAM and the SAP Gateway login pages.\n\nMerge requests with other login handlers are more than welcome via pull request.\n\n## Install\n\n```bash\nnpm install ui5-middleware-onelogin --save-dev\n\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\nCurrently you can define the properties in the configuration (see below) or the following environment variables are used.\n\n- path: `string` the url to the fiori launchpad or just hostname and port of the SAP system, /sap/bc/ui2/flp will then be automatically added\n- username`(optional)`: `string` Username to be used to login to the launchpad\n- password`(optional)`: `string`Password used to login\n- useCertificate`(optional)`: `boolean` use a certificate to login instead of username and password\n- debug`(optional)`: `boolean` true will open up the playwright browser so you can see what's going on\n\n**NB:** If you choose to use the certificate login then check the property AutoSelectCertificateForUrls in chrome://policy if it holds the url pattern for your system. [Playwright](https://github.com/microsoft/playwright/issues/1799) has an issue to handle the certificate prompt. Another workaround is to set debug and useCertificate to true in the configuration and press ok when the prompt opens\n\nYou can either add the following properties to your .env file, remember to add that to your .gitignore\n\n- UI5_MIDDLEWARE_ONELOGIN_LOGIN_URL or UI5_MIDDLEWARE_SIMPLE_PROXY_BASEURI\n- UI5_MIDDLEWARE_ONELOGIN_USERNAME\n- UI5_MIDDLEWARE_ONELOGIN_PASSWORD\n\nUse of environment variables or values set in a `.env` file will be used.\n\nOther options is to either set it in the yaml file or if left blank it will prompt you for the details.\n\nYou can choose to just add the url and let the rest be prompted in the terminal\n![Login prompt](./assets/prompt.png)\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-onelogin\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-onelogin\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n    - name: ui5-middleware-onelogin\n      afterMiddleware: compression\n      configuration:\n        path: <Login URL>\n        username: <Login User>\n        password: <Login Password>\n        useCertificate: true / false (use a certificate to login instead of username and password)\n        debug: true / false (true will open up the playwright browser so you can see what's going on)\n```\n\n## License\n\nMIT\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":175,"downloadsLastMonth":114,"downloads365":558,"downloadsMonthlyGrowth":53.51,"createdAt":"2022-01-19T00:15:38.175Z","updatedAt":"2022-04-11T11:40:06.333Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-onelogin"},{"name":"ui5-middleware-servestatic","version":"0.3.10","description":"UI5 simple proxy middleware","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-servestatic"},"dependencies":{"@ui5/logger":"^2.0.1","dotenv":"^16.0.0","serve-static":"^1.14.2"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["proxy"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-servestatic/","readme":"# UI5 serve static middleware\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), enabling to serve static resources.\n\n## Install\n\n```bash\nnpm install ui5-middleware-servestatic --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- rootPath: `string`\n  the root path to the static resources on your system\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-servestatic\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-servestatic\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:  \n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-servestatic\n    afterMiddleware: compression\n    mountPath: /resources\n    configuration:\n      rootPath: \"/Users/Me/upkg/sapui5-runtime-1.70/resources\"\n```\n\nExample which uses Environment Variables from `.env` file\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-servestatic\n    afterMiddleware: compression\n    mountPath: /resources\n    configuration:\n      rootPath: ${env.SAPUI5_SDK_1_60__RESOURCES}\n```\n\n## How it works\n\nThe middleware integrates [serve-static](https://github.com/expressjs/serve-static) to serve static resources from a specified `rootPath`.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":2636,"downloadsLastMonth":3138,"downloads365":26659,"downloadsMonthlyGrowth":-16,"createdAt":"2019-10-13T08:53:48.795Z","updatedAt":"2022-04-11T11:40:06.457Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-servestatic"},{"name":"ui5-middleware-simpleproxy","version":"0.8.1","description":"UI5 simple proxy middleware","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-simpleproxy"},"dependencies":{"@ui5/logger":"^2.0.1","dotenv":"^16.0.0","express-http-proxy":"^1.6.3","minimatch":"^5.0.0"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["proxy"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-simpleproxy/","readme":"# UI5 simple proxy middleware\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), enabling proxy support.\n\n## Install\n\n```bash\nnpm install ui5-middleware-simpleproxy --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- baseUri: `string`\n  The baseUri to proxy. Can also be set using the `UI5_MIDDLEWARE_SIMPLE_PROXY_BASEURI` environment variable.\n- strictSSL: `boolean`\n  Ignore strict SSL checks. Default value `true`. Can also be set using the `UI5_MIDDLEWARE_SIMPLE_PROXY_STRICT_SSL` environment variable.\n- limit: `string`\n  This sets the body size limit (default: `1mb`). If the body size is larger than the specified (or default) limit,\n  a `413 Request Entity Too Large`  error will be returned. See [bytes.js](https://www.npmjs.com/package/bytes) for\n  a list of supported formats.\n- removeETag:  `boolean`\n  Removes the ETag header from the response to avoid conditional requests.\n- username:  `string`\n  Username used for Basic Authentication.\n- password:  `string`\n  Password used for Basic Authentication.\n- httpHeaders: `map`\n  Http headers set for the proxied request. Will overwrite the http headers from the request. \n- query: `map`\n  Query parameters set for the proxied request. Will overwrite the parameters from the request. \n- excludePatterns: `string[]`\n  Array of exclude patterns using glob syntax\n- skipCache: `boolean`\n  Remove the cache guid when serving from the FLP launchpad if it matches an excludePattern\n\nIn general, use of environment variables or values set in a `.env` file will override configuration values in the `ui5.yaml`.\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-simpleproxy\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-simpleproxy\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-simpleproxy\n    afterMiddleware: compression\n    mountPath: /odata\n    configuration:\n      baseUri: \"https://services.odata.org\"\n      username: myUsername\n      password: myPassword\n      httpHeaders:\n        Any-Header: AnyHeader\n      query:\n        sap-client: '206'\n      excludePatterns:\n      - \"/local/**\"\n```\n\n## How it works\n\nThe middleware launches a simple `proxy`-server which proxies the requests to the given uri. Internally, it uses the express proxy middleware.\n\n## How to ignore self-signed certificates?\n\nIn case you are using HTTPS and self-signed certificates, you may see an error as displayed below:\n\n```bash\nError: unable to verify the first certificate\n    at TLSSocket.onConnectSecure (_tls_wrap.js:1321:34)\n    at TLSSocket.emit (events.js:210:5)\n    at TLSSocket._finishInit (_tls_wrap.js:794:8)\n    at TLSWrap.ssl.onhandshakedone (_tls_wrap.js:608:12)\n```\n\nTo avoid it, you can set the `strictSSL` value in proxy request to be `false`. Its default value is `true`.\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-simpleproxy\n    afterMiddleware: compression\n    mountPath: /odata\n    configuration:\n      baseUri: \"http://services.odata.org\"\n      strictSSL: false\n```\n\n## .env support\n\nThis plugin supports use of a `.env` file to declare environment variable values for configuration as described above. The file should be put in the same directory where you run `ui5 build`, `ui5 serve`, etc. The file might have contents like:\n\n```shell\nUI5_MIDDLEWARE_SIMPLE_PROXY_BASEURI=https://host.tld:1234/sap\nUI5_MIDDLEWARE_SIMPLE_PROXY_STRICT_SSL=false\nUI5_MIDDLEWARE_SIMPLE_PROXY_USERNAME=myUsername\nUI5_MIDDLEWARE_SIMPLE_PROXY_PASSWORD=myPassword\n```\n\n## Hints\n\nIf you are using the Microsoft OData services for testing purposes, like Northwind, please ensure to use the `https` URLs instead of the `http` URLs. The `http` URL will redirect to `https` but instead of the proxy it will try to directly connect to the Microsoft OData services.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":11801,"downloadsLastMonth":11418,"downloads365":92288,"downloadsMonthlyGrowth":3.35,"createdAt":"2019-09-09T22:01:28.304Z","updatedAt":"2022-04-11T11:40:06.890Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-simpleproxy"},{"name":"ui5-middleware-stringreplacer","version":"0.3.3","description":"UI5 middleware for live string replace","author":"Attila Boros","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-stringreplacer"},"dependencies":{"@ui5/logger":"^2.0.1","dotenv":"^16.0.0","etag":"^1.8.1","fresh":"^0.5.2","lodash.escaperegexp":"^4.1.2","minimatch":"5.0.0","replacestream":"^4.0.3"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["replace"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-stringreplacer/","readme":"# UI5 middleware for live string replace in files\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), doing a live string replace on files matched by the includePatterns `files` array configuration option.\n\n## Install\n\n```bash\nnpm install ui5-middleware-stringreplacer --save-dev\n```\n\nor\n\n```bash\nyarn add --dev ui5-middleware-stringreplacer\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: true|false  \n  verbose logging\n- files: `string`|`array`  \n  Placeholders will be replaced with their values in files matched by this glob pattern\n- replace: `array`  \n  List of placeholder, value pairs\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-stringreplacer\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-stringreplacer\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n    - name: ui5-middleware-stringreplacer\n      afterMiddleware: compression\n      configuration:\n        debug: true\n        files:\n          - \"**/*.js\"\n          - \"**/*.xml\"\n        replace:\n          - placeholder: ${project.artifactId}\n            value: my.sample.app\n          - placeholder: ${project.version}\n            value: 1.0.0-SNAPSHOT\n          - placeholder: \"{{app.AppTitle}}\"\n            value: My Sample App\n```\n\n3. Maintain all string placeholders and values in `.env` file\n\n```env\nstringreplacer.BASE_URL_PLACEHOLDER = http://localhost:2000\nstringreplacer.some.deeply.nested.ANOTHER_PLACEHOLDER = Replace with this text\n```\n\n## Multiple environments\n\nYou can keep multiple `.env` files and load a specific environment at build or serve time.\n\n```\n- dev.env\n- staging.env\n- prod.env\n- package.json\n```\n\n```json\n \"scripts\": {\n    \"serve:dev\": \"UI5_ENV=dev ui5 serve\",\n    \"serve:staging\": \"UI5_ENV=staging ui5 serve\",\n    \"serve:prod\": \"UI5_ENV=prod ui5 serve\",\n }\n```\n\nWith `UI5_ENV` set, the strings will be loaded from the `<UI5_ENV>.env` file.\n\n## How it works\n\nThe middleware replaces the placeholders with their values in the files matched by the patterns. All the string placeholders which are maintained in the process environment with prefix 'stringreplacer.' will be taken into account. If no environment name is set through the process environment variable UI5_ENV, then by default the file`./.env` is loaded.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":84,"downloadsLastMonth":192,"downloads365":1059,"downloadsMonthlyGrowth":-56.25,"createdAt":"2020-09-29T12:13:09.886Z","updatedAt":"2022-04-11T11:40:07.073Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-stringreplacer"},{"name":"ui5-middleware-webjars","version":"0.3.6","description":"UI5 middleware for delivering content from JAR files","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-middleware-webjars"},"dependencies":{"@ui5/logger":"^2.0.1","@ui5/server":"^2.3.1","jszip":"^3.7.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware"],"tags":["webjars"]},"type":"middleware","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-middleware-webjars/","readme":"# UI5 middleware for delivering content from JAR files\n\nMiddleware for [ui5-server](https://github.com/SAP/ui5-server), delivering the content of JAR files.\n\n## Install\n\n```bash\nnpm install ui5-middleware-webjars --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- classpathFile: `string`\n\n  the file containing the classpath (list of files, separated with the path delimiter) which can be created via:\n\n  > `mvn clean dependency:build-classpath -Dmdep.cpFile=target/classpath`\n\n- rootPath: `string`\n\n  the root path to the static resources on your system\n\n- jarRootPath: `string`, default: `META-INF/resources/`\n\n  the root path in the JAR file containing the static resources\n\n- debug: `boolean`, default: `false`\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-middleware-webjars\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-middleware-webjars\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-middleware-webjars\n    afterMiddleware: compression\n    configuration:\n      rootPath: \"jars\"\n      jarRootPath: \"META-INF/\"\n```\n\n## How it works\n\nThe middleware searches for JAR files in the `rootPath`, loads them and serves the content from JAR files following the web static resources concept of Servlet 3.0 (WebJARs). By default, this allows to consume static resources from the JAR files from within the `META-INF/resources/` path. When using JAR files following a derived web static resources concept it is possible to override the JAR root path with the configuration `jarRootPath`.\n\n```text\njarRootPath: \"META-INF/resources/\"\n\nMETA-INF/resources/my/resource/path/Resource.js => http://localhost:8080/my/resource/path/Resource.js\n\n---\njarRootPath: \"META-INF/\"\n\nMETA-INF/resources/my/resource/path/Resource.js => http://localhost:8080/resources/my/resource/path/Resource.js\n```\n\n## Development\n\nIf you want to contribute to `ui5-middleware-webjars`, please use [`Prettier`](https://prettier.io) for code formatting/style and apply the rules from `./.prettierrc`. Thanks 🙏!\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, you may buy [@vobu](https://twitter.com/vobu) a beer or [@pmuessig](https://twitter.com/pmuessig) a coke.\n","jsdoc":{"middleware":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":48,"downloadsLastMonth":62,"downloads365":419,"downloadsMonthlyGrowth":-22.58,"createdAt":"2021-01-25T13:38:21.321Z","updatedAt":"2022-04-11T11:40:07.593Z","npmlink":"https://www.npmjs.com/package/ui5-middleware-webjars"},{"name":"ui5-task-compileless","version":"0.2.5","description":"UI5 task for compiling less files","author":"Sebastian Mahr, Marcel Schork","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-compileless"},"dependencies":{"@ui5/logger":"^2.0.1","less-openui5":"^0.11.2","minimatch":"^5.0.0"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["css"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-compileless/","readme":"# UI5 task for compiling less files \n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), enabling compiling of less files in your app folder.\n\n## Install\n\n```bash\nnpm install ui5-task-compileless --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: `true|false`  \n  verbose logging\n\n- appFolderPath: `String`\n  path to your appfolder (default `webapp`)\n\n- lessToCompile `String<Array>`  \n  array of less resources specified as paths or glob patterns which should be compiled \n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-compileless\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-compileless\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n   - name: ui5-task-compileless\n     afterTask: replaceVersion\n     configuration:\n        debug: true\n        appFolderPath: webapp\n        # lessToCompile: (Optional by default css from manifest will be used)\n        #   - \"css/style.less\"\n```\n\n## How it works\n\nThe task can be used to compile less files in your app folder by using [less-openui5](https://github.com/SAP/less-openui5).\n\nIt can also include less file from the ui5 dependencies for example\n```less\n@import \"/resources/sap/ui/core/themes/base/base.less\";\n```\nTo get all the less variable that are defined in the sap ui theme core.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@sebbi](https://app.slack.com/client/T0A7MQSJ1/D01TDU3RMSQ/user_profile/UBV5L8N8M) a beer or buy [@marcel_schork](https://twitter.com/marcel_schork) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":107,"downloadsLastMonth":83,"downloads365":673,"downloadsMonthlyGrowth":28.92,"createdAt":"2021-05-15T09:03:12.534Z","updatedAt":"2022-04-11T11:40:07.592Z","npmlink":"https://www.npmjs.com/package/ui5-task-compileless"},{"name":"ui5-task-flatten-library","version":"0.2.4","description":"Task for the UI5 tooling to flatten the library folder structure. This is required for deployments to SAP NetWeaver.","author":"Matthias Osswald","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-flatten-library"},"dependencies":{"@ui5/logger":"^2.0.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["netweaver"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-flatten-library/","readme":"# UI5 task to flatten the library folder structure\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), to prepare build result for deployment to SAP NetWeaver.\n\n## Prerequisites\n\n- Requires `@ui5/cli` v2.4.0+ (to support [specVersion 2.2](https://sap.github.io/ui5-tooling/pages/Configuration/#specification-version-22))\n\n## Install\n\n```bash\nnpm install --save-dev ui5-task-flatten-library\n```\n\nor\n\n```bash\nyarn add --dev ui5-task-flatten-library\n```\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-flatten-library\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-flatten-library\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n    - name: ui5-task-flatten-library\n      afterTask: generateResourcesJson\n\n```\n\n## How it works\n\n- For `src` files it removes the `/resources/${projectNamespace}/` part of the path (e.g. `dist/resources/my/lib/library.js` => `dist/library.js`)\n- All `test` files (`/test-resources/`) will be omitted from the build result\n- A warning is logged for `src` files that are not part of the project namespace\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally, you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) or [@matthiaso](https://twitter.com/matthiaso) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":154,"downloadsLastMonth":83,"downloads365":938,"downloadsMonthlyGrowth":85.54,"createdAt":"2020-09-20T07:24:15.115Z","updatedAt":"2022-04-11T11:40:08.289Z","npmlink":"https://www.npmjs.com/package/ui5-task-flatten-library"},{"name":"ui5-task-i18ncheck","version":"0.3.7","description":"Task for the UI5 tooling to check missing translations in i18n properties used in XML views.","author":"Fatih Pense","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-i18ncheck"},"dependencies":{"@ui5/logger":"^2.0.1","xmldom":"^0.6.0"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["i18n"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-i18ncheck/","readme":"# UI5 task for checking missing translations in i18n properties used in XML views\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), checking missing translations.\n\n## Install\n\n```bash\nnpm install ui5-task-i18ncheck --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: true|false  \nVerbose logging\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-i18ncheck\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-i18ncheck\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-task-i18ncheck\n    afterTask: replaceVersion\n    configuration:\n      debug: true\n```\n\n## How it works\n\nThe task reads all XML views and i18n properties files. Then the task cross-checks for missing translations and gives a warning if it can catch one. Currently, views created in javascript is not included in the check.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally, you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) or [@fatihpense](https://twitter.com/fatihpense) a coke when you see them.","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":636,"downloadsLastMonth":1200,"downloads365":11933,"downloadsMonthlyGrowth":-47,"createdAt":"2020-05-02T02:49:30.560Z","updatedAt":"2022-04-11T11:40:08.180Z","npmlink":"https://www.npmjs.com/package/ui5-task-i18ncheck"},{"name":"ui5-task-minify-xml","version":"0.2.4","description":"UI5 task for minifying XML resources (like views, fragments, etc.)","author":"Kristian Kraljic","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-minify-xml"},"dependencies":{"@ui5/logger":"^2.0.1","minify-xml":"^3.3.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["minify"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-minify-xml/","readme":"# UI5 task for minifying XML resources (like views, fragments, etc.)\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), enabling XML minification based on [minify-xml](https://github.com/kristian/minify-xml#readme).\n\n## Install\n\n```bash\nnpm install ui5-task-minify-xml --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- minifyOptions: `Object`\n  all options available from the [minify-xml](https://github.com/kristian/minify-xml#options) plugin, with one additional (non-compliant) `collapseWhitespaceInAttributeValues` (`boolean`) option, due to UI5 having a lot of options (e.g. with JSON values) where collapsing whitespace is beneficial. defaults to all standard options of `minify-xml` and `collapseWhitespaceInAttributeValues` enabled.\n\n- fileExtensions: `String|Array<String>`\n  the file extensions to glob for. defaults to `xml`.\n\n- excludePatterns: `Array<String>` \n  array of paths inside `$yourapp/` to exclude from the minification, e.g. 3-rd party libs in `lib/*`. defaults to an empty array `[]`.\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-minify-xml\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-minify-xml\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-task-minify-xml\n    afterTask: replaceVersion\n    configuration:\n      minifyOptions:\n        removeComments: true\n        collapseEmptyElements: true\n        collapseWhitespaceInAttributeValues: true\n        # ... further minify-xml attributes\n      fileExtensions:\n      - \"xml\"\n      - \"edmx\"\n      excludePatterns:\n      - \"lib/\"\n      - \"another/dir/in/webapp\"\n      - \"yet/another/dir\"\n```\n\n## License\n\nThis work is [licensed](../../LICENSE) under the Apache 2.0 license.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":42,"downloadsLastMonth":46,"downloads365":326,"downloadsMonthlyGrowth":-8.7,"createdAt":"2021-08-07T20:04:24.145Z","updatedAt":"2022-04-11T11:40:08.737Z","npmlink":"https://www.npmjs.com/package/ui5-task-minify-xml"},{"name":"ui5-task-pwa-enabler","version":"0.2.9","description":"UI5 task to make a PWA out of a UI5 application.","author":"Mona Kaczun, Maximilian Moehl","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-pwa-enabler"},"dependencies":{"@ui5/fs":"^2.0.6","graceful-fs":"4.2.9","jsdom":"^19.0.0","mustache":"^4.2.0","parse5":"^6.0.1"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["pwa"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-pwa-enabler/","readme":"# UI5 task for turning a UI5 App into a PWA\n\n[What are Progressive Web Apps (PWAs)?](https://web.dev/progressive-web-apps/)\n\n## Install\n\n`npm install ui5-task-pwa-enabler --save-dev`\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\nIf you are familiar with jsonschema check out the config.json.\n\n### `serviceWorker`\n\n`strategy`\n\nDefines how the service worker should behave. Possible values are\n\n* `Offline-Page` The App will display a offline page when it cannot connect to the internet. Requires `offlinePage` parameter.\n* `Offline-Copy` While browsing the App, the Service Worker captures all files and stores them in the cache.\n* `Offline-Copy-With-Backup-Page` A combination of the above two. Requires `offlinePage` parameter.\n* `Cache-First` This option pre-caches all given files and serves them from the cache first. Requires `preCacheFiles` parameter.\n* `Advanced-Caching` With this option you have very granular control about which files should be cached, and which shouldn't. Requires all of the parameters below.\n\n`offlinePage`: Sets the page that will be shown if the user is offline, should be a `.html` file somewhere in your project. Only required for `Offline-Page`, `Offline-Copy-With-Backup-Page`, `Advanced-Caching`.\n\n`preCache`: List of [glob pattern](https://en.wikipedia.org/wiki/Glob_(programming)) that match the files that will be pre cached when the application starts. Only required for `Cache-First` and `Advanced-Caching` strategies.\n\n`networkFirst`: List of regular expressions, everything that matches any of the expressions will be fetched from the network first and only served from cache when there is no network available. Only required for `Advanced-Caching`.\n\n`avoidCaching`: List of regular expressions, everything that matches any of the expressions won't be cached. Only required for `Advanced-Caching`\n\n### `manifest`\n\nWhatever you supply here will be copied to the `manifest.webmanifest` file, you can read more about it at [web.dev](https://web.dev/add-manifest/). If a required parameter is missing a default value will be provided.\n\n## Usage\n\n### 1. Define the dependency in your `package.json`\n\n```json\n\"devDependencies\": {\n    \"ui5-task-pwa-enabler\": \"*\"\n},\n\"ui5\": {\n    \"dependencies\": [\n        \"ui5-task-pwa-enabler\"\n    ]\n}\n```\n\n### 2. Configure it in your `ui5.yaml`\n\nThis is a example configuration for an advanced service worker and some custom manifest parameters.\n\n```yaml\nspecVersion: '1.0'\nmetadata:\n  name: openui5-sample-app\ntype: application\nresources:\n  configuration:\n    propertiesFileSourceEncoding: \"UTF-8\"\nbuilder:\n  customTasks:\n    - name: ui5-task-pwa-enabler\n      afterTask: generateVersionInfo\n      configuration:\n        serviceWorker:\n          strategy: Advanced-Caching\n          offlinePage: offline.html\n          preCache:\n            - \"controller/*\"\n            - \"*.html\"\n            - \"view/*\"\n            - \"images/*\"\n          networkFirst:\n            - /\\/api\\/.*/\n          avoidCaching:\n            - /\\/realtime-api\\/.*/\n        manifest:\n          short_name: To-Do App\n          name: To-Do App\n          description: Sample to-do-app for testing pwaEnabler\n          icons:\n            - src: images/SAP_R_192.png\n              type: image/png\n              sizes: 192x192\n            - src: images/SAP_R_512.png\n              type: image/png\n              sizes: 512x512\n          start_url: /index.html\n          scope: /\n          background_color: \"#EFF4F9\"\n          theme_color: \"#3F5161\"\n          display: standalone\n```\n\n## How it works\n\nUnder the hood we are using the examples from the [pwabuilder](https://github.com/pwa-builder/pwabuilder-serviceworkers)\nbut we replaced the configuration part with templating and generate those values from the provided configuration.\nAdditionally we have to inject a few lines into the `index.html` to make sure everything is linked and tadaa, you have\nyour own fancy PWA.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu), [@maxmoehl](https://github.com/maxmoehl) or [@monakac](https://github.com/monakac) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":55,"downloadsLastMonth":74,"downloads365":555,"downloadsMonthlyGrowth":-25.68,"createdAt":"2020-05-26T23:40:15.394Z","updatedAt":"2022-04-11T11:40:08.801Z","npmlink":"https://www.npmjs.com/package/ui5-task-pwa-enabler"},{"name":"ui5-task-stringreplacer","version":"0.6.2","description":"Task for the UI5 tooling to replace string placeholders.","author":"TheVivekGowda","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-stringreplacer"},"dependencies":{"@ui5/logger":"^2.0.1","dotenv":"^16.0.0","lodash.escaperegexp":"^4.1.2","replacestream":"^4.0.3"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["replace"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-stringreplacer/","readme":"# UI5 task for replacing strings from any files while creating build\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), replacing string values.\n\n## Install\n\n```bash\nnpm install ui5-task-stringreplacer --save-dev\n```\n\nor\n\n```bash\nyarn add --dev ui5-task-stringreplacer\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: true|false  \n  verbose logging\n- files: `string`|`array`  \n  Placeholders will be replaced with their values in files matched by this glob pattern\n- replace: `array`  \n  List of placeholder, value pairs\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-stringreplacer\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-stringreplacer\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n    - name: ui5-task-stringreplacer\n      afterTask: replaceVersion\n      configuration:\n        files:\n          - \"**/*.js\"\n          - \"**/*.xml\"\n        replace:\n          - placeholder: ${project.artifactId}\n            value: my.sample.app\n          - placeholder: ${project.version}\n            value: 1.0.0-SNAPSHOT\n          - placeholder: \"{{app.AppTitle}}\"\n            value: My Sample App\n```\n\n3. Maintain all string placeholders and values in `.env` file\n\n```env\nstringreplacer.BASE_URL_PLACEHOLDER = http://localhost:2000\nstringreplacer.some.deeply.nested.ANOTHER_PLACEHOLDER = Replace with this text\n```\n\n## Multiple environments\n\nYou can keep multiple `.env` files and load a specific environment at build or serve time.\n\n```\n- dev.env\n- staging.env\n- prod.env\n- package.json\n```\n\n```json\n \"scripts\": {\n    \"build:dev\": \"UI5_ENV=dev ui5 build\",\n    \"build:staging\": \"UI5_ENV=staging ui5 build\",\n    \"build:prod\": \"UI5_ENV=prod ui5 build\",\n }\n```\n\nWith `UI5_ENV` set, the strings will be loaded from the `<UI5_ENV>.env` file.\n\n## How it works\n\nThe task reads all files based on configuration patterns and replaces all string placeholders with values for all files. All the string placeholders which are maintained in the process environment with prefix 'stringreplacer.' will be taken into account. If no environment name is set through the process environment variable UI5_ENV, then by default the file`./.env` is loaded.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally, you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) or [@TheVivekGowda](https://twitter.com/TheVivekGowda) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":204,"downloadsLastMonth":185,"downloads365":2461,"downloadsMonthlyGrowth":10.27,"createdAt":"2020-05-23T10:26:14.351Z","updatedAt":"2022-04-11T11:40:09.336Z","npmlink":"https://www.npmjs.com/package/ui5-task-stringreplacer"},{"name":"ui5-task-transpile","version":"0.3.7","description":"UI5 task for transpiling ES6+ sources","author":"Volker Buzek, Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-transpile"},"dependencies":{"@babel/core":"^7.17.5","@babel/plugin-transform-modules-commonjs":"^7.16.8","@babel/preset-env":"^7.16.11","@ui5/logger":"^2.0.1","babel-plugin-transform-async-to-promises":"^0.8.18","babel-plugin-transform-remove-console":"^6.9.4"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["transpile"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-transpile/","readme":"# UI5 task for transpiling ES6+ sources\n\nTask for [ui5-builder](https://github.com/SAP/ui5-builder), enabling transpiling.\n\n## Install\n\n```bash\nnpm install ui5-task-transpile --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- debug: `true|false`  \n  verbose logging\n\n- removeConsoleStatements: `true|false`  \n  remove console statements while transpiling using [Babel plugin](https://babeljs.io/docs/en/babel-plugin-transform-remove-console)\n\n- excludePatterns: `String<Array>`  \n  array of paths inside `$yourapp/webapp/` to exclude from live transpilation,  \n  e.g. 3-rd party libs in `lib/*`\n\n- transpileAsync: `true|false`  \n  transpiling `async/await` using [this Babel plugin](https://www.npmjs.com/package/babel-plugin-transform-async-to-promises), which doesn't require  \n  the regenerator runtime ([Issue #242](https://github.com/petermuessig/ui5-ecosystem-showcase/issues/242))\n\n- babelConfig: `Object`\n  object to use as configuration for babel instead of the  \n  default configuration defined in this middleware\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-task-transpile\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-task-transpile\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. configure it in `$yourapp/ui5.yaml`:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-task-transpile\n    afterTask: replaceVersion\n    configuration:\n      debug: true\n      removeConsoleStatements: true\n      transpileAsync: true\n      excludePatterns:\n      - \"lib/\"\n      - \"another/dir/in/webapp\"\n      - \"yet/another/dir\"\n```\n\n## How it works\n\nThe task can be used to transpile ES6+ JavaScript code to ES5 by using `babel`.\n\n## Extending the default configuration (in `$yourapp/babel.config.json`)\n\nIf you want to further customize the transpiling options you can do so by creating a babel config file `babel.config.json` in your project directory. Babel will automatically pick up the configuration and apply it. The default configuration from this task will still be applied.\n\n### Example\n\nAn example configuration is as follows:\n\n```json\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-for-of\", { \"assumeArray\": true }],\n    [\"@babel/plugin-transform-computed-properties\", { \"loose\": true }],\n    [\"@babel/plugin-transform-destructuring\", { \"loose\": true }]\n  ]\n}\n```\n\n### Additional dependencies\n\nIf you need dependencies not included in this task you have to install them in your project in order to be able to use them.\n\n## Override babel configuration (in `$yourapp/ui5.yaml`)\n\nYou can override the default babel configuration from this package by including an object `babelConfig` in this task's configuration. If such an object is given the default configuration from this task will not be considered, but only the configuration given in `ui5.yaml` will be used.\n\n### Example\n\n```yaml\nbuilder:\n  customTasks:\n    - name: ui5-task-transpile\n      afterTask: replaceVersion\n      configuration:\n        excludePatterns:\n          - \"lib/\"\n        babelConfig: &babelConfig\n          plugins:\n            - - \"@babel/plugin-transform-computed-properties\"\n              - loose: true\n            - - \"@babel/plugin-transform-for-of\"\n              - assumeArray: true\n          presets:\n            - - \"@babel/preset-env\"\n              - targets:\n                  browsers: \"last 2 versions, ie 10-11\"\n```\n\n> Hint: if you also use use `ui5-middleware-livetranspile` you probably do not want to duplicate the babel configuration in your `ui5.yaml`. Use YAML anchors in order to reference the babel configuration across the `ui5.yaml` file.\n> In the example above the anchor `&babelConfig` defines the babel configuration of `ui5-task-transpile` and may be re-used in other parts of `ui5.yaml` by using the alias `*babelConfig`:\n>\n> ```yaml\n> server:\n>   customMiddleware:\n>   - name: ui5-middleware-livetranspile\n>     afterMiddleware: compression\n>     configuration:\n>       babelConfig:\n>         <<: *babelConfig\n>         sourceMaps: \"inline\"\n> ```\n\n### Additional dependencies\n\nIf you need dependencies not included in this task you have to install them in your project in order to be able to use them.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":3009,"downloadsLastMonth":3610,"downloads365":34055,"downloadsMonthlyGrowth":-16.65,"createdAt":"2019-09-09T22:01:27.877Z","updatedAt":"2022-04-11T11:40:09.379Z","npmlink":"https://www.npmjs.com/package/ui5-task-transpile"},{"name":"ui5-task-zipper","version":"0.4.10","description":"Task for the UI5 tooling to zip the webapp.","author":"Marius Obert","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-task-zipper"},"scripts":{"test":"ava"},"ava":{"files":["test/**/*","!test/_ui5-app","!__assets__"],"verbose":true,"timeout":"20s"},"dependencies":{"@ui5/fs":"^2.0.6","@ui5/logger":"^2.0.1","yazl":"^2.5.1"},"devDependencies":{"ava":"^4.0.1","yauzl":"^2.10.0"},"ui5":{"dependencies":[]},"ui5-community":{"types":["task"],"tags":["zip"]},"type":"task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-task-zipper/","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":21228,"downloadsLastMonth":17904,"downloads365":120775,"downloadsMonthlyGrowth":18.57,"createdAt":"2020-02-13T21:31:22.234Z","updatedAt":"2022-04-11T11:40:10.041Z","npmlink":"https://www.npmjs.com/package/ui5-task-zipper"},{"name":"ui5-tooling-modules","version":"0.2.7","description":"UI5 tooling extensions to load and convert node modules as UI5 AMD-like modules","author":"Peter Muessig","license":"other","repository":{"type":"git","url":"https://github.com/ui5-community/ui5-ecosystem-showcase.git","directory":"packages/ui5-tooling-modules"},"dependencies":{"@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.1.3","@ui5/fs":"^2.0.6","@ui5/logger":"^2.0.1","espree":"^9.3.1","estraverse":"^5.3.0","fast-xml-parser":"^4.0.3","rollup":"^2.68.0","rollup-plugin-inject-process-env":"^1.3.1","rollup-plugin-polyfill-node":"^0.8.0"},"ui5":{"dependencies":[]},"ui5-community":{"types":["middleware","task"],"tags":["tooling"]},"type":"middleware,task","forks":63,"stars":143,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-ecosystem-showcase/tree/main/packages/ui5-tooling-modules/","readme":"# UI5 Tooling Extensions for NPM Package Consumption\n\n> **DISCLAIMER**: This is a community project and there is no official support for this package! Also the functionality may stop working at any time in future with newer versions of the UI5 tooling!\n\nThe UI5 tooling extensions include a custom middleware and a custom task which allow to use NPM package names for AMD-like dependencies, e.g.:\n\n```bash\n# Install a dev dependency to Chart.js (https://www.chartjs.org/)\nnpm install chart.js --save-dev\n```\n\n```js\n// use Chart.js as a AMD-like dependency\nsap.ui.define([\n  \"chart.js\"\n], function(chartjs) {\n  [...]\n  alert(chartjs.version);\n  [...]\n})\n```\n\nOnce the UI5 application is finally built, the Chart.js dependency will be copied into the `dist/resources` folder with the proper namespace. In case of Chart.js above, there is no namespace and thus the location will be `dist/resources/chart.js.js`.\n\n## Install\n\n```bash\nnpm install ui5-tooling-modules --save-dev\n```\n\n## Configuration options (in `$yourapp/ui5.yaml`)\n\n- verbose: `boolean`  \n  Enables verbose logging (default to `false`)\n\n## Usage\n\n1. Define the dependency in `$yourapp/package.json`:\n\n```json\n\"devDependencies\": {\n    // ...\n    \"ui5-tooling-modules\": \"*\"\n    // ...\n},\n\"ui5\": {\n  \"dependencies\": [\n    // ...\n    \"ui5-tooling-modules\",\n    // ...\n  ]\n}\n```\n\n> As the devDependencies are not recognized by the UI5 tooling, they need to be listed in the `ui5 > dependencies` array. In addition, once using the `ui5 > dependencies` array you need to list all UI5 tooling relevant dependencies.\n\n2. Configure it in `$yourapp/ui5.yaml`:\n\nThe configuration for the custom task:\n\n```yaml\nbuilder:\n  customTasks:\n  - name: ui5-tooling-modules-task\n    afterTask: replaceVersion\n```\n\nThe configuration for the custom middleware:\n\n```yaml\nserver:\n  customMiddleware:\n  - name: ui5-tooling-modules-middleware\n    afterMiddleware: compression\n```\n> Hint: In case your application is using a proxy such `fiori-tools-proxy`, the proxy must run after `ui5-tooling-modules-middleware` middleware. Otherwise proxy will try to serve the resources for your installed npm package instead of `ui5-tooling-modules-middleware`. You can achieve this by setting `afterMiddleware: ui5-tooling-modules-middleware` in `fiori-tools-proxy` middleware.\n## How it works\n\nThe custom middleware is listening to incoming requests and checks those requests to match npm packages. E.g. a dependency to `chart.js` will cause a request to `resource/chart.js.js`. The middleware now derives the module name which is `\"chart.js\"` and uses `require.resolve(\"chart.js\")` to lookup the npm package for it. If an npm package exists, the middleware is using `rollup` to create a custom AMD bundle for the npm package which uses `sap.ui.define` instead of `define`.\n\nThe custom task is scanning all AMD dependencies of all modules and tries to resolve the module names. If a module has been found a custom bundle will be created in the proper namespace of the module, e.g. `@apollo/client/core` will create a custom bundle at `dist/resources/@apollo/client/core.js`.\n\n## How to obtain support\n\nPlease use the GitHub bug tracking system to post questions, bug reports or to create pull requests.\n\n## Contributing\n\nAny type of contribution (code contributions, pull requests, issues) to this showcase will be equally appreciated.\n\n## License\n\nThis work is [dual-licensed](../../LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0 but finally you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.\n","jsdoc":{"task":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":419,"downloadsLastMonth":354,"downloads365":1140,"downloadsMonthlyGrowth":18.36,"createdAt":"2021-11-09T10:37:13.992Z","updatedAt":"2022-04-11T11:40:10.156Z","npmlink":"https://www.npmjs.com/package/ui5-tooling-modules"},{"name":"ui5-cc-md","version":"0.0.4","description":"UI5 custom (notepad) control rendering markdown into html on-the-fly","main":"Markdown.js","scripts":{"test":"jest","test:manual":"cd test/ui5-app && ui5 serve","release":"standard-version"},"keywords":["ui5","custom control","notepad control"],"author":"Volker Buzek <volker.buzek@js-soft.com>","contributors":["Peter Muessig","Matthias Oßwald","Marco Beier"],"repository":{"type":"git","url":"https://github.com/ui5-community/ui5-cc-md.git"},"license":"other","dependencies":{"marked":"^2.0.0"},"devDependencies":{"eslint":"^7.19.0","eslint-plugin-jest":"^24.1.3","jest":"^26.6.3","jest-puppeteer":"^4.4.0","npm-run-all":"^4.1.5","puppeteer":"^7.0.4","standard-version":"^9.1.0"},"ui5-community":{"types":["cc"],"tags":["markdown"]},"type":"cc","forks":3,"stars":6,"addedToBoUI5":"2022-04-09T11:37:57.868Z","githublink":"https://github.com/ui5-community/ui5-cc-md/tree/main/","readme":"# UI5 custom control `ui5-cc-md`\n\nThis namespace contains a custom control rendering regular + github-flavored Markdown content, either provided as a string or from a file.  \nIt outputs plain HTML, ready to be included in an XML view.\n\n## Install\n\n```bash\n$> yarn add ui5-cc-md\n# or\n$> npm install ui5-cc-md\n```\n\n## Included controls\n\n- `Markdown`: transforms Markdown to HTML\n  - properties: (note: either `content` or `fromFile` can be used, not both)\n    - `content: <String>`: Markdown as raw string\n    - `fromFile: <Path>`: relative path to a file containing Markdwon\n  - aggregations: -\n\n## Usage\n\n1. define the dependeny in `$yourapp/package.json`\n\n   ```json\n   // it is already in \"dependencies\" after installation\n   \"ui5\": {\n     \"dependencies\": [\n       // ...\n       \"ui5-cc-md\",\n       // ...\n     ]\n   }\n   ```\n\n2. declare the namespace in your XML view and use the custom control from that namespace\n\n   ```xml\n   <mvc:View ... \n           xmlns:md=\"cc.md\"\n           ...>\n      <md:Markdown content=\"***markdown is nice!***&#13;&#10;&#13;&#10;if only there wasn't the CR problem in XML view string\" />\n      <md:Markdown fromFile=\"./fragment.md\" />\n      <md:Markdown content=\"{/markdownContent}\" />\n   </mvc:View>\n   ```\n\n## How it works\n\n`Markdown` uses the [npm module `marked`](https://marked.js.org) for transforming content from Markdown to HTML.\n\n## Build time (in apps)\n\nUse `ui5 build --all` to produce a deployable version of your app including `ui5-cc-md` and its’ control(s).\n\nOther than that, nothing specific to note for using `ui5-cc-md` in builds in UI5 apps.\n\n## Tests\n\nThe `test` folder contains a minimal UI5 app requiring `ui5-cc-md`. \n\nFor testing manually, do:\n\n```bash\n$> yarn test:manual # runs ui5 serve\n# now point a browser to http://localhost:8080\n```\n\nThe [livereload middleware](https://github.com/petermuessig/ui5-ecosystem-showcase/tree/master/packages/ui5-middleware-livereload) is included, so changes to the test app get reloaded immediately.\n\nA full automated test suite is setup with [Jest + puppeteer](https://jestjs.io/docs/en/puppeteer), starting `ui5 serve` and running all `/test/**/*.test.js` :\n\n```bash\n$> cd test/ui5-app\n$> yarn # for installing runtime dependencies\n$> cd ..\n$> yarn test\n# sample output:\n PASS  test/ui5-app/basic.test.js\n  Markdown\n    ✓ should render markdown via content property (2374 ms)\n    ✓ should render markdown via fromFile property (854 ms)\n    ✓ should render markdown via binding (672 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        4.512 s, estimated 5 s\nRan all test suites.\n✨  Done in 11.90s.\n```\n\n## License\n\nThis work is [dual-licensed](./LICENSE) under Apache 2.0 and the Derived Beer-ware License. The official license will be Apache 2.0, but ultimately you can choose between one of them if you use this work.\n\nWhen you like this stuff, buy [@vobu](https://twitter.com/vobu),  [@matz3](https://twitter.com/matthiaso), [@wridgeu](https://twitter.com/wridgeu) a beer or buy [@pmuessig](https://twitter.com/pmuessig) a coke when you see them.","jsdoc":{"project-shim":{"params":[{"type":"string","description":"The path to use","name":"path"},{"type":"string","optional":true,"description":"the username","name":"username"},{"type":"string","optional":true,"description":"the password","name":"password"},{"type":"boolean","optional":true,"description":"use certificate login instead of username/password","name":"useCertificate"},{"type":"boolean","optional":true,"description":"see output","name":"debug"}],"markdown":"<a name=\"configuration\"></a>\n\n## configuration : <code>Object</code>\nconfiguration\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| path | <code>string</code> | The path to use |\n| [username] | <code>string</code> | the username |\n| [password] | <code>string</code> | the password |\n| [useCertificate] | <code>boolean</code> | use certificate login instead of username/password |\n| [debug] | <code>boolean</code> | see output |\n\n"}},"downloadsCurrentMonth":589,"downloadsLastMonth":135,"downloads365":1126,"downloadsMonthlyGrowth":336.3,"createdAt":"2021-02-12T15:50:11.790Z","updatedAt":"2022-03-21T14:30:09.573Z","npmlink":"https://www.npmjs.com/package/ui5-cc-md"}],"tags":[{"name":"middleware","count":12,"type":"type"},{"name":"task","count":9,"type":"type"},{"name":"cc","count":1,"type":"type"},{"name":"btp","count":1,"type":"tag"},{"name":"browser","count":2,"type":"tag"},{"name":"css","count":2,"type":"tag"},{"name":"livereload","count":1,"type":"tag"},{"name":"transpile","count":2,"type":"tag"},{"name":"auth","count":1,"type":"tag"},{"name":"proxy","count":2,"type":"tag"},{"name":"replace","count":2,"type":"tag"},{"name":"webjars","count":1,"type":"tag"},{"name":"netweaver","count":1,"type":"tag"},{"name":"i18n","count":1,"type":"tag"},{"name":"minify","count":1,"type":"tag"},{"name":"pwa","count":1,"type":"tag"},{"name":"zip","count":1,"type":"tag"},{"name":"tooling","count":1,"type":"tag"},{"name":"markdown","count":1,"type":"tag"}]}